let isOpen = false;
const messageSound = new Audio('path/to/message-sound.mp3');
let soundEnabled = true;

// Categorias do sistema
const categorias = {
    suporte: {
        emoji: 'üîß',
        titulo: 'Suporte T√©cnico',
        opcoes: [
            'Computador n√£o liga',
            'Internet lenta',
            'Problemas com software',
            'Backup de dados'
        ]
    },
    vendas: {
        emoji: 'üí∞',
        titulo: 'Vendas',
        opcoes: [
            'Or√ßamento',
            'Produtos dispon√≠veis',
            'Formas de pagamento',
            'Prazos de entrega'
        ]
    },
    agendamento: {
        emoji: 'üìÖ',
        titulo: 'Agendamento',
        opcoes: [
            'Marcar visita t√©cnica',
            'Consultar disponibilidade',
            'Reagendar atendimento',
            'Cancelar agendamento'
        ]
    }
};

// Base de conhecimento para respostas
const knowledgeBase = {
    saudacoes: {
        palavras: ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite', 'hey'],
        respostas: [
            "Ol√°! Como posso ajudar voc√™ hoje?",
            "Oi! Em que posso ser √∫til?",
            "Ol√°! Estou aqui para ajudar!"
        ]
    },
    
    servicos: {
        palavras: ['servi√ßo', 'servicos', 'fazem', 'trabalho', 'realizam'],
        respostas: [
            "Oferecemos diversos servi√ßos:\n‚úÖ Manuten√ß√£o de Computadores\n‚úÖ Instala√ß√£o de Redes\n‚úÖ Suporte T√©cnico\n‚úÖ Consultoria em TI\n\nQual servi√ßo voc√™ precisa?",
            "Nossa empresa √© especializada em:\nüîπ Manuten√ß√£o de PCs e Notebooks\nüîπ Redes e Infraestrutura\nüîπ Suporte T√©cnico\nüîπ Consultoria\n\nPosso detalhar algum servi√ßo?"
        ]
    },
    
    precos: {
        palavras: ['pre√ßo', 'preco', 'valor', 'quanto', 'custa', 'or√ßamento'],
        respostas: [
            "Os pre√ßos variam conforme o servi√ßo. Posso te passar algumas op√ß√µes:\n1. Visita t√©cnica: R$XX\n2. Manuten√ß√£o b√°sica: R$XX\n3. Consultoria: R$XX/hora\n\nQuer um or√ßamento espec√≠fico?",
            "Para fazer um or√ßamento preciso, preciso de alguns detalhes do seu caso. Pode me contar mais sobre o que voc√™ precisa?"
        ]
    },
    
    horarios: {
        palavras: ['hor√°rio', 'horario', 'funcionamento', 'aberto', 'atendimento'],
        respostas: [
            "üìÖ Nosso hor√°rio de atendimento:\nSegunda a Sexta: 8h √†s 18h\nS√°bado: 8h √†s 12h",
            "Estamos dispon√≠veis:\n‚è∞ Segunda a Sexta: 8h √†s 18h\n‚è∞ S√°bado: 8h √†s 12h\n\nQuer agendar um hor√°rio?"
        ]
    },
    
    contato: {
        palavras: ['contato', 'telefone', 'whatsapp', 'email', 'falar'],
        respostas: [
            "Voc√™ pode entrar em contato conosco:\nüì± WhatsApp: (71) 99919-5766\nüìß Email: placidojunior34@gmail.com",
            "Quer falar diretamente conosco?\nüí¨ WhatsApp: (71) 99919-5766\n‚úâÔ∏è Email: placidojunior34@gmail.com"
        ]
    },
    
    problemas: {
        palavras: ['problema', 'computador', 'pc', 'notebook', 'lento', 'internet', 'rede'],
        respostas: [
            "Entendi que voc√™ est√° com um problema t√©cnico. Para melhor atend√™-lo, preciso saber:\n1. Qual equipamento?\n2. Qual o problema espec√≠fico?\n3. Desde quando est√° acontecendo?",
            "Para resolver seu problema, vou precisar de algumas informa√ß√µes:\n‚ñ´Ô∏è Descri√ß√£o do problema\n‚ñ´Ô∏è Quando come√ßou\n‚ñ´Ô∏è J√° tentou alguma solu√ß√£o?"
        ]
    },
    
    agradecimento: {
        palavras: ['obrigado', 'obrigada', 'valeu', 'thanks', 'grato'],
        respostas: [
            "Por nada! Estou aqui para ajudar! üòä",
            "Disponha! Se precisar de mais alguma coisa, √© s√≥ chamar! üëç",
            "O prazer √© meu em ajudar! ü§ù"
        ]
    }
};

function toggleChat() {
    const chatbox = document.getElementById('chatbox');
    const helpButton = document.querySelector('.help-button');
    isOpen = !isOpen;
    
    chatbox.style.display = isOpen ? 'flex' : 'none';
    helpButton.classList.toggle('hidden', isOpen);
    
    if (isOpen && document.getElementById('chat-messages').children.length === 0) {
        checkAvailability();
        sendBotMessageWithDelay("Ol√°! Como posso ajudar voc√™ hoje?");
        mostrarCategorias();
        addQuickButtons();
    }
}

function isBusinessHours() {
    const now = new Date();
    const hour = now.getHours();
    const day = now.getDay();
    
    if (day >= 1 && day <= 5) {
        return hour >= 8 && hour < 18;
    }
    if (day === 6) {
        return hour >= 8 && hour < 12;
    }
    return false;
}

function checkAvailability() {
    if (!isBusinessHours()) {
        sendBotMessageWithDelay("Ol√°! Estamos fora do hor√°rio de atendimento. "+
            "Deixe sua mensagem e retornaremos no pr√≥ximo dia √∫til.\n\n"+
            "Hor√°rio de atendimento:\n"+
            "Segunda a Sexta: 8h √†s 18h\n"+
            "S√°bado: 8h √†s 12h");
    }
}

function mostrarCategorias() {
    let menuHTML = `<div class="categories-menu">`;
    for (let key in categorias) {
        const cat = categorias[key];
        menuHTML += `
            <div class="category-item" onclick="selecionarCategoria('${key}')">
                <span class="category-emoji">${cat.emoji}</span>
                <span class="category-title">${cat.titulo}</span>
            </div>
        `;
    }
    menuHTML += `</div>`;
    
    document.getElementById('chat-messages').insertAdjacentHTML('beforeend', menuHTML);
}

function selecionarCategoria(categoria) {
    const cat = categorias[categoria];
    let opcoesHTML = `<div class="options-menu">`;
    cat.opcoes.forEach(opcao => {
        opcoesHTML += `
            <button onclick="selecionarOpcao('${opcao}')">${opcao}</button>
        `;
    });
    opcoesHTML += `</div>`;
    
    sendBotMessage(`${cat.emoji} ${cat.titulo} - Escolha uma op√ß√£o:`);
    document.getElementById('chat-messages').insertAdjacentHTML('beforeend', opcoesHTML);
}

function selecionarOpcao(opcao) {
    addMessage(opcao, 'user-message');
    handleBotResponse(opcao);
}

function showTypingIndicator() {
    const messages = document.getElementById('chat-messages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'typing-indicator bot-message';
    typingDiv.innerHTML = '<span>.</span><span>.</span><span>.</span>';
    messages.appendChild(typingDiv);
    messages.scrollTop = messages.scrollHeight;
    return typingDiv;
}

function sendBotMessageWithDelay(message) {
    const typingIndicator = showTypingIndicator();
    setTimeout(() => {
        typingIndicator.remove();
        sendBotMessage(message);
        if (soundEnabled) playMessageSound();
    }, 1500);
}

function sendMessage() {
    const input = document.getElementById('user-input');
    const message = input.value.trim();
    
    if (message) {
        addMessage(message, 'user-message');
        saveChat(message, true);
        input.value = '';
        handleBotResponse(message);
    }
}

function addMessage(text, className) {
    const messages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${className}`;
    messageDiv.textContent = text;
    messages.appendChild(messageDiv);
    messages.scrollTop = messages.scrollHeight;
}

function sendBotMessage(text) {
    addMessage(text, 'bot-message');
}

// Fun√ß√£o para encontrar a melhor resposta
function findBestResponse(message) {
    const messageLower = message.toLowerCase();
    let bestMatch = null;
    let maxMatches = 0;

    for (const category in knowledgeBase) {
        const keywords = knowledgeBase[category].palavras;
        let matches = 0;

        for (const word of keywords) {
            if (messageLower.includes(word)) {
                matches++;
            }
        }

        if (matches > maxMatches) {
            maxMatches = matches;
            bestMatch = category;
        }
    }

    if (bestMatch) {
        const responses = knowledgeBase[bestMatch].respostas;
        return responses[Math.floor(Math.random() * responses.length)];
    }

    return "Desculpe, n√£o entendi completamente. Pode reformular sua pergunta? Ou se preferir, entre em contato pelo WhatsApp (71) 99919-5766 para um atendimento mais personalizado.";
}

// Atualizar a fun√ß√£o handleBotResponse
function handleBotResponse(userMessage) {
    const response = findBestResponse(userMessage);
    sendBotMessageWithDelay(response);
}

function addQuickButtons() {
    const buttonsHtml = `
        <div class="quick-buttons">
            <button onclick="handleQuickButton('or√ßamento')">Solicitar Or√ßamento</button>
            <button onclick="handleQuickButton('hor√°rio')">Ver Hor√°rios</button>
            <button onclick="handleQuickButton('servi√ßos')">Nossos Servi√ßos</button>
            <button onclick="handleQuickButton('contato')">Contato Direto</button>
        </div>
    `;
    if (!document.querySelector('.quick-buttons')) {
        document.querySelector('.chat-input').insertAdjacentHTML('beforebegin', buttonsHtml);
    }
}

function handleQuickButton(type) {
    const messages = {
        'or√ßamento': 'Gostaria de solicitar um or√ßamento',
        'hor√°rio': 'Qual o hor√°rio de atendimento?',
        'servi√ßos': 'Quais servi√ßos voc√™s oferecem?',
        'contato': 'Preciso falar com um atendente'
    };
    
    const message = messages[type];
    if (message) {
        addMessage(message, 'user-message');
        handleBotResponse(message);
    }
}

function addFeedbackButtons(messageId) {
    return `
        <div class="feedback-buttons">
            <button onclick="rateChatbot('helpful', ${messageId})">üëç</button>
            <button onclick="rateChatbot('unhelpful', ${messageId})">üëé</button>
        </div>
    `;
}

function showSuggestions(input) {
    const suggestions = [
        'Qual o hor√°rio de atendimento?',
        'Preciso de um or√ßamento',
        'Como fa√ßo para agendar?',
        'Quais servi√ßos voc√™s oferecem?'
    ];
    
    const matchingSuggestions = suggestions.filter(s => 
        s.toLowerCase().includes(input.toLowerCase())
    );

    // Mostrar sugest√µes
    if (matchingSuggestions.length > 0) {
        showSuggestionsList(matchingSuggestions);
    }
}

// Hist√≥rico e armazenamento
function saveChat(message, isUser) {
    let chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '[]');
    chatHistory.push({
        message: message,
        isUser: isUser,
        timestamp: new Date().toISOString()
    });
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
}

function loadChatHistory() {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '[]');
    chatHistory.forEach(item => {
        addMessage(item.message, item.isUser ? 'user-message' : 'bot-message');
    });
}

// Avalia√ß√£o de satisfa√ß√£o
function finalizarAtendimento() {
    const satisfacaoHTML = `
        <div class="satisfaction-survey">
            <p>Como foi seu atendimento?</p>
            <div class="rating-buttons">
                <button onclick="avaliarAtendimento(1)">üòû</button>
                <button onclick="avaliarAtendimento(2)">üòê</button>
                <button onclick="avaliarAtendimento(3)">üòä</button>
                <button onclick="avaliarAtendimento(4)">üòÑ</button>
                <button onclick="avaliarAtendimento(5)">üòç</button>
            </div>
        </div>
    `;
    
    document.getElementById('chat-messages').insertAdjacentHTML('beforeend', satisfacaoHTML);
}

function avaliarAtendimento(nota) {
    sendBotMessage(`Obrigado pela sua avalia√ß√£o! ${nota >= 4 ? 'üòä' : 'üôè'}`);
    // Aqui voc√™ pode adicionar c√≥digo para salvar a avalia√ß√£o
}

// Eventos
document.getElementById('user-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
}); 